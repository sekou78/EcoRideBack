<?php

namespace App\Command;

use App\Entity\Trajet;
use App\Document\TrajetArchive;
use App\Service\ArchivageService;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ODM\MongoDB\DocumentManager;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

#[AsCommand(
    name: 'app:archive-trajets',
    description: 'Archiver ou mettre √† jour les trajets termin√©s dans MongoDB',
)]
class ArchiveTrajetsCommand extends Command
{
    public function __construct(
        private EntityManagerInterface $em,
        private DocumentManager $dm,
        private ArchivageService $archivageService
    ) {
        parent::__construct();
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $output->writeln("üöÄ D√©but de l‚Äôarchivage...");

        // R√©cup√®re tous les trajets termin√©s depuis MySQL
        $trajets = $this->em->getRepository(Trajet::class)->findBy(['statut' => 'TERMINEE']);
        $output->writeln("Nombre de trajets termin√©s trouv√©s : " . count($trajets));

        foreach ($trajets as $trajet) {
            // V√©rifie si le trajet est d√©j√† archiv√© dans MongoDB
            $existing = $this->dm->getRepository(TrajetArchive::class)
                ->findOneBy(['trajetId' => $trajet->getId()]);

            if ($existing) {
                // R√©-archivage ‚Üí mise √† jour du snapshot et date
                $this->archivageService->archiverTrajet($trajet);
                $output->writeln("üîÑ Trajet #{$trajet->getId()} mis √† jour dans MongoDB.");
            } else {
                // Nouveau trajet ‚Üí insertion
                $this->archivageService->archiverTrajet($trajet);
                $output->writeln("‚úÖ Trajet #{$trajet->getId()} archiv√© dans MongoDB.");
            }
        }

        $output->writeln("üèÅ Archivage termin√©.");

        return Command::SUCCESS;
    }
}

// namespace App\Command;

// use App\Entity\Trajet;
// use App\Document\TrajetArchive;
// use App\Service\ArchivageService;
// use Doctrine\ORM\EntityManagerInterface;
// use Doctrine\ODM\MongoDB\DocumentManager;
// use Symfony\Component\Console\Attribute\AsCommand;
// use Symfony\Component\Console\Command\Command;
// use Symfony\Component\Console\Input\InputInterface;
// use Symfony\Component\Console\Output\OutputInterface;

// #[AsCommand(
//     name: 'app:archive-trajets',
//     description: 'Cr√©er un archive des trajets termin√©s (sans doublons)',
// )]
// class ArchiveTrajetsCommand extends Command
// {
//     public function __construct(
//         private EntityManagerInterface $em,
//         private DocumentManager $dm,
//         private ArchivageService $archivageService
//     ) {
//         parent::__construct();
//     }

//     protected function execute(InputInterface $input, OutputInterface $output): int
//     {
//         $trajets = $this->em->getRepository(Trajet::class)->findBy(['statut' => 'TERMINEE']);

//         foreach ($trajets as $trajet) {
//             // V√©rifier si le trajet est d√©j√† archiv√© dans MongoDB
//             $existing = $this->dm->getRepository(TrajetArchive::class)->findOneBy([
//                 'trajetId' => $trajet->getId(),
//             ]);

//             if ($existing) {
//                 $output->writeln("Trajet #{$trajet->getId()} d√©j√† archiv√©, skipping.");
//                 continue;
//             }

//             // Archiver le trajet
//             $this->archivageService->archiverTrajet($trajet);
//             $output->writeln("‚úÖ Trajet #{$trajet->getId()} archiv√©.");
//         }

//         return Command::SUCCESS;
//     }
// }
